pubspec.yaml
dependencies:
  flutter:
    sdk: flutter
  google_maps_flutter: ^2.0.10
main.dart
import 'package:flutter/material.dart'; import 'package:flutter_gmaps/directions_model.dart';
import 'package:flutter_gmaps/directions_repository.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
void main() { runApp(MyApp());}
class MyApp extends StatelessWidget {
  Widget build(BuildContext context) {return MaterialApp(title: 'Flutter Google Maps',
      debugShowCheckedModeBanner: false,theme: ThemeData(
        primaryColor: Colors.white,
      ),home: MapScreen(), );}}
class MapScreen extends StatefulWidget {
  _MapScreenState createState() => _MapScreenState();
}class _MapScreenState extends State<MapScreen> {
  static const _initialCameraPosition = CameraPosition(
    target: LatLng(37.773972, -122.431297),zoom: 11.5,);
  GoogleMapController _googleMapController;
  Marker _origin;Marker _destination;Directions _info;
  void dispose() {_googleMapController.dispose(); super.dispose();
  }  Widget build(BuildContext context) {
    return Scaffold(appBar: AppBar(centerTitle: false,
        title: const Text('Google Maps'), actions: [   if (_origin != null)TextButton(
              onPressed: () => _googleMapController.animateCamera(
                CameraUpdate.newCameraPosition(CameraPosition(
                    target: _origin.position,zoom: 14.5,tilt: 50.0,
                  ),),),style: TextButton.styleFrom(
                primary: Colors.green,textStyle: const TextStyle(fontWeight: FontWeight.w600),
              ),child: const Text('ORIGIN'),
            ),if (_destination != null)
            TextButton( onPressed: () => _googleMapController.animateCamera(
                CameraUpdate.newCameraPosition(CameraPosition(
                    target: _destination.position,zoom: 14.5,tilt: 50.0,),),),style: TextButton.styleFrom(
                primary: Colors.blue,textStyle: const TextStyle(fontWeight: FontWeight.w600),
              ),child: const Text('DEST'),)],),
      body: Stack(alignment: Alignment.center,children: [GoogleMap(
            myLocationButtonEnabled: false, zoomControlsEnabled: false,
            initialCameraPosition: _initialCameraPosition,
            onMapCreated: (controller) => _googleMapController = controller,
            markers: {if (_origin != null) _origin, if (_destination != null) _destination},
            polylines: {if (_info != null)Polyline(polylineId: const PolylineId('overview_polyline'),
                  color: Colors.red,width: 5,points: _info.polylinePoints
                      .map((e) => LatLng(e.latitude, e.longitude)).toList(),
                ),},onLongPress: _addMarker,),if (_info != null)Positioned(top: 20.0,child: Container(
                padding: const EdgeInsets.symmetric(vertical: 6.0,horizontal: 12.0,),
                decoration: BoxDecoration( color: Colors.yellowAccent,
                  borderRadius: BorderRadius.circular(20.0),boxShadow: const [
                    BoxShadow(color: Colors.black26, offset: Offset(0, 2), blurRadius: 6.0,)],),
                child: Text('${_info.totalDistance}, ${_info.totalDuration}',
                  style: const TextStyle( fontSize: 18.0, fontWeight: FontWeight.w600, ),), ), ),],),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Theme.of(context).primaryColor,
        foregroundColor: Colors.black,
        onPressed: () => _googleMapController.animateCamera(_info != null
              ? CameraUpdate.newLatLngBounds(_info.bounds, 100.0)
              : CameraUpdate.newCameraPosition(_initialCameraPosition),
        ),child: const Icon(Icons.center_focus_strong),  ),); }
  void _addMarker(LatLng pos) async {
    if (_origin == null || (_origin != null && _destination != null)) {setState(() {
        _origin = Marker( markerId: const MarkerId('origin'),
          infoWindow: const InfoWindow(title: 'Origin'),
          icon: BitmapDescriptor.defaultMarkerWithHue(
              BitmapDescriptor.hueGreen),  position: pos,);_destination = null;_info = null;
      });} else {setState(() {
        _destination = Marker(markerId: const MarkerId('destination'),
          infoWindow: const InfoWindow(title: 'Destination'),
          icon: BitmapDescriptor.defaultMarkerWithHue(
              BitmapDescriptor.hueBlue),position: pos,);});
      final directions = await DirectionsRepository()
          .getDirections(origin: _origin.position, destination: pos);
      setState(() => _info = directions); }}}
AndroidManifest.xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.flutter_gmaps">
  <application android:label="flutter_gmaps" android:icon="@mipmap/ic_launcher">
    <activity android:name=".MainActivity" android:launchMode="singleTop"
      android:theme="@style/LaunchTheme"
android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
      android:hardwareAccelerated="true" android:windowSoftInputMode="adjustResize">
      <meta-data android:name="io.flutter.embedding.android.NormalTheme" android:resource="@style/NormalTheme" />
      <meta-data android:name="io.flutter.embedding.android.SplashScreenDrawable" android:resource="@drawable/launch_background" /> <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
</intent-filter></activity> <meta-data android:name="flutterEmbedding" android:value="2" /> <meta-data android:name="com.google.android.geo.android:value="<YOUR-API-KEY>" />
  </application></manifest>
